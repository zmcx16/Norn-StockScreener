{"version":3,"sources":["webpack:///./src/components/options/pcr/pcrSummary.module.scss","webpack:///./node_modules/recharts/es6/chart/LineChart.js","webpack:///./src/components/options/pcr/stockAndPCRDataChart.js","webpack:///./src/components/options/pcr/pcrSummary.js","webpack:///./src/pages/options-pcr.js"],"names":["module","exports","LineChart","chartName","GraphicalChild","axisComponents","axisType","AxisComp","formatAxisMap","StockAndPCRDataChart","_ref","title","data","React","createElement","style","width","window","innerWidth","height","innerHeight","maxWidth","maxHeight","ResponsiveContainer","ComposedChart","syncId","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tickFormatter","tickItem","moment","format","YAxis","yAxisId","domain","orientation","Tooltip","Legend","wrapperStyle","Line","connectNulls","type","name","stroke","dot","Bar","fill","PCRSummary","loadingAnimeRef","hideColState","setHideColState","useState","modalWindowRef","useRef","popModalWindow","popPureModal","tableColList","hide","text","getData","async","url","fetchObj","resp_data","get","response","ok","renderShowChart","symbol","console","log","Promise","all","fetchStockData","fetchPCRData","then","allResponses","length","startDate","Date","now","allDateByKey","convertData2DictByDate","dateKey","key","valueKey1","valueKey2","valueKey3","Array","isArray","forEach","val","parseInt","date","parse","toLocaleDateString","allDataArray","targetKeys","Object","keys","sort","o","push","current","catch","PCRField","field","headerName","valueFixed","description","output","renderCell","params","value","Number","MAX_VALUE","undefined","fontWeight","color","parseFloat","toFixed","useFetch","cachePolicy","renderShortStocksTable","config","showChart","reduce","result","index","stockInfo","id","close","PCR_OpenInterest_Latest","PCR_OpenInterest_Week","PCR_OpenInterest_Month","PCR_Volume_Latest","PCR_Volume_Week","PCR_Volume_Month","Calls_LatestTotalOI","Calls_LatestTotalVol","Puts_LatestTotalOI","Puts_LatestTotalVol","PE","PB","dividend","high52","low52","perfWeek","perfMonth","perfQuarter","perfHalfY","perfYear","perfYTD","filter_symbols","includes","setRowData","setLoading","rowData","searchVal","setSearchVal","useEffect","queryParameters","URLSearchParams","location","search","Fragment","className","pcrSummaryStyle","container","table","DataGrid","rows","columns","SymbolNameField","PriceField","PercentField","KMBTField","PureFieldWithValueCheck","ColorPercentField","IconButton","size","aria-haspopup","onClick","row","BarChartSharpIcon","fontSize","components","NoRowsOverlay","DefaultDataGridTable","Toolbar","SearchGridToolbar","clickCallback","info","placeholder","tooltip","PCRTooltip","link","YahooFinanceEnUrl","disableSelectionOnClick","onColumnVisibilityChange","param","tempHideColState","ModalWindow","OptionsPCRPage","getLoading","StylesProvider","injectFirst","SEO","Layout","LoadingAnime"],"mappings":"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","file":"component---src-pages-options-pcr-js-945d7f12208531c7ff68.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"pcrSummary-module--container--2JpDB\",\"showColumn\":\"pcrSummary-module--showColumn--3L-nv\",\"table\":\"pcrSummary-module--table--38sJ-\"};","/**\n * @fileOverview Line Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Line } from '../cartesian/Line';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var LineChart = generateCategoricalChart({\n  chartName: 'LineChart',\n  GraphicalChild: Line,\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import React from 'react'\r\nimport {\r\n  LineChart,\r\n  ComposedChart,\r\n  Line,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from 'recharts'\r\n\r\nimport moment from 'moment'\r\n\r\nconst StockAndPCRDataChart = ({ title, data }) => {\r\n  return (\r\n    <div style={{ width: (window.innerWidth - 80) + 'px', height: (window.innerHeight - 80) + 'px', maxWidth: '1200px', maxHeight: '800px' }}>\r\n      <h3>{title}</h3>\r\n      <ResponsiveContainer width=\"100%\" height=\"32%\">\r\n        <ComposedChart\r\n          data={data}\r\n          syncId=\"StockAndPCRDataChart\"\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"Date\" tickFormatter={(tickItem) => {\r\n            return moment(tickItem).format('MM/DD/YYYY')\r\n          }} />\r\n          <YAxis yAxisId=\"left\" domain={['auto', 'auto']}/>\r\n          <YAxis yAxisId=\"right\" orientation=\"right\" domain={['auto', 'auto']}/>\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ bottom: -5 }}/>\r\n          <Line connectNulls yAxisId=\"left\" type=\"monotone\" name={\"Close Price\"} dataKey=\"close\" stroke=\"#8884d8\" dot={false} />\r\n          <Bar yAxisId=\"right\" name={\"Volume\"} dataKey=\"volume\" fill=\"#82ca9d\" />\r\n        </ComposedChart>\r\n      </ResponsiveContainer>     \r\n      <ResponsiveContainer width=\"100%\" height=\"32%\">\r\n        <ComposedChart\r\n          data={data}\r\n          syncId=\"StockAndPCRDataChart\"\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"Date\" tickFormatter={(tickItem) => {\r\n            return moment(tickItem).format('MM/DD/YYYY')\r\n          }} />\r\n          <YAxis yAxisId=\"left\" domain={['auto', 'auto']}/>\r\n          <YAxis yAxisId=\"right\" orientation=\"right\" domain={['auto', 'auto']}/>\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ bottom: -5 }}/>\r\n          <Line connectNulls yAxisId=\"left\" type=\"monotone\" name={\"PCR OpenInterest\"} dataKey=\"PCR_OpenInterest\" stroke=\"#FF8042\"/>\r\n          <Line connectNulls yAxisId=\"right\" type=\"monotone\" name={\"PCR Volume\"} dataKey=\"PCR_Volume\" stroke=\"#00C49F\"/>\r\n        </ComposedChart>\r\n      </ResponsiveContainer>  \r\n      <ResponsiveContainer width=\"100%\" height=\"32%\">\r\n        <LineChart\r\n          data={data}\r\n          syncId=\"StockAndPCRDataChart\"\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"Date\" tickFormatter={(tickItem) => {\r\n            return moment(tickItem).format('MM/DD/YYYY')\r\n          }} />\r\n          <YAxis yAxisId=\"left\" domain={['auto', 'auto']}/>\r\n          <YAxis yAxisId=\"right\" orientation=\"right\" domain={['auto', 'auto']}/>\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line connectNulls yAxisId=\"left\" type=\"monotone\" name={\"Calls Total OI\"} dataKey=\"Calls_TotalOI\" stroke=\"#FF8042\"/>\r\n          <Line connectNulls yAxisId=\"left\" type=\"monotone\" name={\"Puts Total OI\"} dataKey=\"Puts_TotalOI\" stroke=\"#2828FF\"/>\r\n          <Line connectNulls yAxisId=\"right\" type=\"monotone\" name={\"Calls Total Vol\"} dataKey=\"Calls_TotalVol\" stroke=\"#00C49F\"/>\r\n          <Line connectNulls yAxisId=\"right\" type=\"monotone\" name={\"Puts Total Vol\"} dataKey=\"Puts_TotalVol\" stroke=\"#8C8C00\"/>\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default StockAndPCRDataChart\r\n","\r\nimport React, { useState, useRef, useEffect } from 'react'\r\nimport { DataGrid } from '@mui/x-data-grid'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport BarChartSharpIcon from '@mui/icons-material/BarChartSharp'\r\nimport useFetch from 'use-http'\r\nimport moment from 'moment'\r\n\r\nimport StockAndPCRDataChart from './stockAndPCRDataChart'\r\nimport ModalWindow from '../../modalWindow'\r\nimport DefaultDataGridTable from '../../defaultDataGridTable'\r\nimport SearchGridToolbar from '../../searchGridToolbar'\r\nimport { YahooFinanceEnUrl, PCRTooltip } from '../../../common/common'\r\nimport { SymbolNameField, PriceField, PureFieldWithValueCheck, PercentField, ColorPercentField, KMBTField } from '../../../common/dataGridUtil'\r\n\r\nimport pcrSummaryStyle from './pcrSummary.module.scss'\r\nimport '../../muiTablePagination.css'\r\n\r\nconst PCRSummary = ({ loadingAnimeRef }) => {\r\n\r\n  const [hideColState, setHideColState] = useState({})\r\n\r\n  const modalWindowRef = useRef({\r\n    popModalWindow: null,\r\n    popPureModal: null,\r\n  })\r\n\r\n  const tableColList = {\r\n    Close: { hide: false, text: 'Price' },\r\n    PCR_OpenInterest_Latest: { hide: false, text: 'PCR (OI)' },\r\n    PCR_OpenInterest_Week: { hide: false, text: 'OI-1W(%)' },\r\n    PCR_OpenInterest_Month: { hide: false, text: 'OI-1M(%)' },\r\n    Calls_LatestTotalOI: { hide: false, text: 'Calls OI' },\r\n    Puts_LatestTotalOI: { hide: false, text: 'Puts OI' },\r\n    PCR_Volume_Latest: { hide: false, text: 'PCR (Vol)' },\r\n    PCR_Volume_Week: { hide: false, text: 'Vol-1W(%)' },\r\n    PCR_Volume_Month: { hide: false, text: 'Vol-1M(%)' },\r\n    Calls_LatestTotalVol: { hide: false, text: 'Calls Vol' },\r\n    Puts_LatestTotalVol: { hide: false, text: 'Puts Vol' },\r\n    PE: { hide: false, text: 'P/E' },\r\n    PB: { hide: false, text: 'P/B' },\r\n    Dividend: { hide: false, text: 'Dividend %' },\r\n    High52: { hide: false, text: '52W High' },\r\n    Low52: { hide: false, text: '52W Low' },\r\n    PerfWeek: { hide: false, text: 'Perf Week' },\r\n    PerfMonth: { hide: false, text: 'Perf Month' },\r\n    PerfQuarter: { hide: false, text: 'Perf Quarter' },\r\n    PerfHalfY: { hide: false, text: 'Perf Half Y' },\r\n    PerfYear: { hide: false, text: 'Perf Year' },\r\n    PerfYTD: { hide: false, text: 'Perf YTD' },\r\n    Chart: { hide: false, text: 'Chart' },\r\n  }\r\n\r\n  const getData = async (url, fetchObj) => {\r\n    const resp_data = await fetchObj.get(url)\r\n    if (fetchObj.response.ok && resp_data) {\r\n      return resp_data\r\n    }\r\n    else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  const renderShowChart = (symbol)=> {\r\n    console.log(symbol)\r\n    Promise.all([\r\n      getData(\"/norn-data/stock/historical-quotes/\" + symbol+\".json\", fetchStockData),\r\n      getData(\"/norn-data/options/pcr/historical-by-symbol/\" + symbol+\".json\", fetchPCRData),\r\n    ]).then((allResponses) => {\r\n      console.log(allResponses)\r\n      if (allResponses.length === 2 && allResponses[0] !== null && allResponses[1] !== null) {\r\n        let startDate = new Date(Date.now() - 365*24*60*60*1000)\r\n        if (allResponses[1].length > 0) {\r\n          startDate = new Date(allResponses[1][allResponses[1].length-1][\"update_time\"])\r\n        }\r\n\r\n        let allDateByKey = {}\r\n        const convertData2DictByDate = (data, dateKey, key, valueKey1, valueKey2=null, valueKey3=null) => {\r\n          if (data && !Array.isArray(data)) {\r\n            console.log(\"data is not array\")\r\n            return\r\n          }\r\n\r\n          allResponses[1].forEach((val) => {\r\n            val[\"data\"][\"PCR_OpenInterest\"] = parseInt( val[\"data\"][\"PCR_OpenInterest\"] * 100, 10) / 100.0\r\n            val[\"data\"][\"PCR_Volume\"] = parseInt( val[\"data\"][\"PCR_Volume\"] * 100, 10) / 100.0\r\n          })\r\n\r\n          data.forEach((val) => {\r\n            let date = Date.parse(new Date(Date.parse(val[dateKey])).toLocaleDateString()) // align timezone\r\n            if (date < startDate) {\r\n              return\r\n            }\r\n            if (!(date in allDateByKey)) {\r\n              allDateByKey[date] = {}\r\n            }\r\n            if (valueKey2 === null) {\r\n              allDateByKey[date][key] = val[valueKey1]\r\n            } else if (valueKey3 === null) {\r\n              allDateByKey[date][key] = val[valueKey1][valueKey2]\r\n            } else {\r\n              allDateByKey[date][key] = val[valueKey1][valueKey2][valueKey3]\r\n            }\r\n          })\r\n        }\r\n        convertData2DictByDate(allResponses[0], \"Date\", \"close\", \"Close\")\r\n        convertData2DictByDate(allResponses[0], \"Date\", \"volume\", \"Volume\")\r\n        convertData2DictByDate(allResponses[1], \"update_time\", \"PCR_OpenInterest\", \"data\", \"PCR_OpenInterest\")\r\n        convertData2DictByDate(allResponses[1], \"update_time\", \"PCR_Volume\", \"data\", \"PCR_Volume\")\r\n        convertData2DictByDate(allResponses[1], \"update_time\", \"Calls_TotalOI\", \"data\", \"calls\", \"totalOpenInterest\")\r\n        convertData2DictByDate(allResponses[1], \"update_time\", \"Calls_TotalVol\", \"data\", \"calls\", \"totalVolume\")\r\n        convertData2DictByDate(allResponses[1], \"update_time\", \"Puts_TotalOI\", \"data\", \"puts\", \"totalOpenInterest\")\r\n        convertData2DictByDate(allResponses[1], \"update_time\", \"Puts_TotalVol\", \"data\", \"puts\", \"totalVolume\")\r\n        console.log(allDateByKey)\r\n        let allDataArray = []\r\n        let targetKeys = [\"close\", \"volume\", \"PCR_OpenInterest\", \"PCR_Volume\", \"Calls_TotalOI\", \"Calls_TotalVol\", \"Puts_TotalOI\", \"Puts_TotalVol\"]\r\n        Object.keys(allDateByKey).sort().forEach((key) => {\r\n          let o = { Date: moment(parseInt(key)).format('MM/DD/YYYY') }\r\n          targetKeys.forEach((val) => {\r\n            if (val in allDateByKey[key]) {\r\n              o[val] = allDateByKey[key][val]\r\n            }\r\n          })\r\n          allDataArray.push(o)\r\n        })\r\n        console.log(allDataArray)\r\n        const title = `${symbol} Chart`\r\n        modalWindowRef.current.popModalWindow(<StockAndPCRDataChart title={title} data={allDataArray} />)\r\n      } else {\r\n        modalWindowRef.current.popModalWindow(<div>Load some data failed</div>)\r\n      }\r\n    }).catch(() => {\r\n      modalWindowRef.current.popModalWindow(<div>Can't draw stock price & pcr chart</div>)\r\n    })\r\n  }\r\n\r\n  function PCRField(field, headerName, width, valueFixed, hide, description = null){\r\n    let output = {\r\n      field: field,\r\n      headerName: headerName,\r\n      width: width,\r\n      type: 'number',\r\n      renderCell: (params) => (\r\n        params.value === \"-\" || params.value === -Number.MAX_VALUE || params.value === Number.MAX_VALUE || params.value === null || params.value === undefined || params.value === \"Infinity\" || params.value === 'NaN' ?\r\n          <span>-</span> :\r\n          <span style={{ fontWeight: 500, color: parseFloat(params.value) <= 0.7 ? 'green' : parseFloat(params.value) >= 1 ? 'red' : '' }}>{params.value.toFixed(valueFixed)}</span>\r\n      ),\r\n      hide: hide\r\n    }\r\n    \r\n    if (description != null) {\r\n      output['description'] = description\r\n    }\r\n    return output\r\n  }\r\n\r\n  const genTableColTemplate = () => {\r\n    return [\r\n      SymbolNameField('Symbol', 130, 'symbol' in hideColState ? hideColState['symbol'] : false),\r\n      PriceField('close', tableColList.Close.text, 110, 'close' in hideColState ? hideColState['close'] : tableColList['Close'].hide, null, \"yahoo\"),\r\n      PCRField(\"PCR_OpenInterest_Latest\", tableColList.PCR_OpenInterest_Latest.text, 110, 2, \"PCR_OpenInterest_Latest\" in hideColState ? hideColState[\"PCR_OpenInterest_Latest\"] : tableColList['PCR_OpenInterest_Latest'].hide, \"Put-Call Ratio (Open Interest)\"),\r\n      PercentField(\"PCR_OpenInterest_Week\", tableColList.PCR_OpenInterest_Week.text, 110, \"PCR_OpenInterest_Week\" in hideColState ? hideColState[\"PCR_OpenInterest_Week\"] : tableColList['PCR_OpenInterest_Week'].hide, 'Put-Call Ratio (Open Interest) 1 Week Changed (%)'),\r\n      PercentField(\"PCR_OpenInterest_Month\", tableColList.PCR_OpenInterest_Month.text, 110, \"PCR_OpenInterest_Week\" in hideColState ? hideColState[\"PCR_OpenInterest_Month\"] : tableColList['PCR_OpenInterest_Month'].hide, 'Put-Call Ratio (Open Interest) 1 Month Changed (%)'),\r\n      KMBTField(\"Calls_LatestTotalOI\", tableColList.Calls_LatestTotalOI.text, 110, 2, \"Calls_LatestTotalOI\" in hideColState ? hideColState[\"Calls_LatestTotalOI\"] : tableColList['Calls_LatestTotalOI'].hide, \"Calls Total Open Interest\"),\r\n      KMBTField(\"Puts_LatestTotalOI\", tableColList.Puts_LatestTotalOI.text, 110, 2, \"Puts_LatestTotalOI\" in hideColState ? hideColState[\"Puts_LatestTotalOI\"] : tableColList['Puts_LatestTotalOI'].hide, \"Puts Open Total Interest\"),\r\n      PCRField(\"PCR_Volume_Latest\", tableColList.PCR_Volume_Latest.text, 110, 2, \"PCR_Volume_Latest\" in hideColState ? hideColState[\"PCR_Volume_Latest\"] : tableColList['PCR_Volume_Latest'].hide, \"Put-Call Ratio (Volume)\"),\r\n      PercentField(\"PCR_Volume_Week\", tableColList.PCR_Volume_Week.text, 110, \"PCR_Volume_Week\" in hideColState ? hideColState[\"PCR_Volume_Week\"] : tableColList['PCR_Volume_Week'].hide, 'Put-Call Ratio (Volume) 1 Week Changed (%)'),\r\n      PercentField(\"PCR_Volume_Month\", tableColList.PCR_Volume_Month.text, 110, \"PCR_Volume_Month\" in hideColState ? hideColState[\"PCR_Volume_Month\"] : tableColList['PCR_Volume_Month'].hide, 'Put-Call Ratio (Volume) 1 Month Changed (%)'),\r\n      KMBTField(\"Calls_LatestTotalVol\", tableColList.Calls_LatestTotalVol.text, 110, 2, \"Calls_LatestTotalVol\" in hideColState ? hideColState[\"Calls_LatestTotalVol\"] : tableColList['Calls_LatestTotalVol'].hide, \"Calls Total Volume\"),\r\n      KMBTField(\"Puts_LatestTotalVol\", tableColList.Puts_LatestTotalVol.text, 110, 2, \"Puts_LatestTotalVol\" in hideColState ? hideColState[\"Puts_LatestTotalVol\"] : tableColList['Puts_LatestTotalVol'].hide, \"Puts Total Volume\"),\r\n      PureFieldWithValueCheck(\"PE\", tableColList.PE.text, 110, 2, \"PE\" in hideColState ? hideColState[\"PE\"] : tableColList['PE'].hide),\r\n      PureFieldWithValueCheck(\"PB\", tableColList.PB.text, 110, 2, \"PB\" in hideColState ? hideColState[\"PB\"] : tableColList['PB'].hide),\r\n      PercentField(\"dividend\", tableColList.Dividend.text, 150, \"dividend\" in hideColState ? hideColState[\"dividend\"] : tableColList['Dividend'].hide),\r\n      PercentField(\"high52\", tableColList.High52.text, 150, \"high52\" in hideColState ? hideColState[\"high52\"] : tableColList['High52'].hide),\r\n      PercentField(\"low52\", tableColList.Low52.text, 150, \"low52\" in hideColState ? hideColState[\"low52\"] : tableColList['Low52'].hide),\r\n      ColorPercentField(\"perfWeek\", tableColList.PerfWeek.text, 150, 2, \"perfWeek\" in hideColState ? hideColState[\"perfWeek\"] : tableColList['PerfWeek'].hide, 500),\r\n      ColorPercentField(\"perfMonth\", tableColList.PerfMonth.text, 150, 2, \"perfMonth\" in hideColState ? hideColState[\"perfMonth\"] : tableColList['PerfMonth'].hide, 500),\r\n      ColorPercentField(\"perfQuarter\", tableColList.PerfQuarter.text, 150, 2, \"perfQuarter\" in hideColState ? hideColState[\"perfQuarter\"] : tableColList['PerfQuarter'].hide, 500),\r\n      ColorPercentField(\"perfHalfY\", tableColList.PerfHalfY.text, 150, 2, \"perfHalfY\" in hideColState ? hideColState[\"perfHalfY\"] : tableColList['PerfHalfY'].hide, 500),\r\n      ColorPercentField(\"perfYear\", tableColList.PerfYear.text, 150, 2, \"perfYear\" in hideColState ? hideColState[\"perfYear\"] : tableColList['PerfYear'].hide, 500),\r\n      ColorPercentField(\"perfYTD\", tableColList.PerfYTD.text, 150, 2, \"perfYTD\" in hideColState ? hideColState[\"perfYTD\"] : tableColList['PerfYTD'].hide, 500),\r\n      {\r\n        field: 'Chart',\r\n        headerName: tableColList.Chart.text,\r\n        width: 130,\r\n        renderCell: (params) => (\r\n          <IconButton\r\n            size=\"small\"\r\n            aria-haspopup=\"true\"\r\n            onClick={()=>{\r\n              renderShowChart(params.row[\"symbol\"])\r\n            }}\r\n          >\r\n            <BarChartSharpIcon color=\"primary\" style={{ fontSize: 40 }} />\r\n          </IconButton>\r\n        ),\r\n        hide: 'Chart' in hideColState ? hideColState['Chart'] : tableColList['Chart'].hide\r\n      },\r\n    ]\r\n  }\r\n\r\n  const fetchStockData = useFetch({ cachePolicy: 'no-cache' })\r\n  const fetchPCRData = useFetch({ cachePolicy: 'no-cache' })\r\n  const renderShortStocksTable = (config, showChart)=>{\r\n    Promise.all([\r\n      getData(\"/norn-data/stock/stat.json\", fetchStockData),\r\n      getData('/norn-data/options/pcr/stat.json', fetchPCRData),\r\n    ]).then((allResponses) => {\r\n      // console.log(allResponses)\r\n      if (allResponses.length === 2 && allResponses[0] !== null && allResponses[1] !== null) {      \r\n        let output = Object.keys(allResponses[1][\"data\"]).reduce((result, symbol, index) => {\r\n          let stockInfo = allResponses[0][symbol]\r\n          let value = allResponses[1][\"data\"][symbol]\r\n          let o = {\r\n            id: index,\r\n            symbol: symbol,\r\n            close: stockInfo !== undefined && stockInfo !== null && stockInfo['Close'] !== '-' ? stockInfo['Close'] : -Number.MAX_VALUE,\r\n            PCR_OpenInterest_Latest: value['PCR_OpenInterest_Latest'] !== '-' ? value['PCR_OpenInterest_Latest'] : -Number.MAX_VALUE,\r\n            PCR_OpenInterest_Week: value['PCR_OpenInterest_Week'] !== '-' ? value['PCR_OpenInterest_Week'] : -Number.MAX_VALUE,\r\n            PCR_OpenInterest_Month: value['PCR_OpenInterest_Month'] !== '-' ? value['PCR_OpenInterest_Month'] : -Number.MAX_VALUE,\r\n            PCR_Volume_Latest: value['PCR_Volume_Latest'] !== '-' ? value['PCR_Volume_Latest'] : -Number.MAX_VALUE,\r\n            PCR_Volume_Week: value['PCR_Volume_Week'] !== '-' ? value['PCR_Volume_Week'] : -Number.MAX_VALUE,\r\n            PCR_Volume_Month: value['PCR_Volume_Month'] !== '-' ? value['PCR_Volume_Month'] : -Number.MAX_VALUE,\r\n            Calls_LatestTotalOI: value['Calls_LatestTotalOI'] !== '-' ? value['Calls_LatestTotalOI'] : -Number.MAX_VALUE,\r\n            Calls_LatestTotalVol: value['Calls_LatestTotalVol'] !== '-' ? value['Calls_LatestTotalVol'] : -Number.MAX_VALUE,\r\n            Puts_LatestTotalOI: value['Puts_LatestTotalOI'] !== '-' ? value['Puts_LatestTotalOI'] : -Number.MAX_VALUE,\r\n            Puts_LatestTotalVol: value['Puts_LatestTotalVol'] !== '-' ? value['Puts_LatestTotalVol'] : -Number.MAX_VALUE,\r\n            PE: stockInfo !== undefined && stockInfo !== null && stockInfo['P/E'] !== '-' ? stockInfo['P/E'] : Number.MAX_VALUE,\r\n            PB: stockInfo !== undefined && stockInfo !== null && stockInfo['P/B'] !== '-' ? stockInfo['P/B'] : Number.MAX_VALUE,\r\n            dividend: stockInfo !== undefined && stockInfo !== null && stockInfo['Dividend %'] !== '-' ? stockInfo['Dividend %'] : -Number.MAX_VALUE,\r\n            high52: stockInfo !== undefined && stockInfo !== null && stockInfo['52W High'] !== '-' ? stockInfo['52W High'] : -Number.MAX_VALUE,\r\n            low52: stockInfo !== undefined && stockInfo !== null && stockInfo['52W Low'] !== '-' ? stockInfo['52W Low'] : -Number.MAX_VALUE,\r\n            perfWeek: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Week'] !== '-' ? stockInfo['Perf Week'] : -Number.MAX_VALUE,\r\n            perfMonth: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Month'] !== '-' ? stockInfo['Perf Month'] : -Number.MAX_VALUE,\r\n            perfQuarter: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Quarter'] !== '-' ? stockInfo['Perf Quarter'] : -Number.MAX_VALUE,\r\n            perfHalfY: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Half Y'] !== '-' ? stockInfo['Perf Half Y'] : -Number.MAX_VALUE,\r\n            perfYear: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Year'] !== '-' ? stockInfo['Perf Year'] : -Number.MAX_VALUE,\r\n            perfYTD: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf YTD'] !== '-' ? stockInfo['Perf YTD'] : -Number.MAX_VALUE,\r\n          }\r\n\r\n          if(config.filter_symbols.length === 0 || config.filter_symbols.includes(symbol)) {\r\n            result.push(o)\r\n          }\r\n          return result\r\n        }, [])\r\n        console.log(output)\r\n        setRowData(output)\r\n        if (showChart) {\r\n          renderShowChart(output[0][\"symbol\"])\r\n        }\r\n      } else {\r\n        modalWindowRef.current.popModalWindow(<div>Load some data failed</div>)\r\n      }\r\n      loadingAnimeRef.current.setLoading(false)\r\n    }).catch(() => {\r\n      modalWindowRef.current.popModalWindow(<div>Can't get data</div>)\r\n      loadingAnimeRef.current.setLoading(false)\r\n    })\r\n  }\r\n\r\n  const [rowData, setRowData] = useState([])\r\n  const [searchVal, setSearchVal] = useState(\"\")\r\n  useEffect(() => {\r\n    // componentDidMount is here!\r\n    // componentDidUpdate is here!\r\n    let config = {filter_symbols: []}\r\n    let showChart = false\r\n    if (typeof window !== 'undefined') {\r\n      const queryParameters = new URLSearchParams(window.location.search)\r\n      let symbol = queryParameters.get(\"symbol\")\r\n      if (symbol) {\r\n        config = {filter_symbols: [symbol]}\r\n      }\r\n      showChart = queryParameters.get(\"showChart\") === \"true\"\r\n    }\r\n    renderShortStocksTable(config, showChart)\r\n    return () => {\r\n      // componentWillUnmount is here!\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div className={pcrSummaryStyle.container}>\r\n        <div className={pcrSummaryStyle.table}>\r\n          <DataGrid rows={rowData} columns={genTableColTemplate()} components={{ NoRowsOverlay: DefaultDataGridTable, Toolbar: ()=>{\r\n            return <SearchGridToolbar searchVal={searchVal} setSearchVal={setSearchVal} clickCallback={(config)=>{\r\n              renderShortStocksTable(config, false)\r\n            }} \r\n              info={{\r\n                placeholder: 'Filter symbols: AAPL, BAC, KSS, ...',\r\n                tooltip: {\r\n                  text: PCRTooltip,\r\n                  link: YahooFinanceEnUrl\r\n                }\r\n              }}\r\n            />\r\n          }}} disableSelectionOnClick onColumnVisibilityChange={(param) => {\r\n            let tempHideColState = hideColState\r\n            tempHideColState[param['field']] = !param['isVisible']\r\n            setHideColState(tempHideColState)\r\n          }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <ModalWindow modalWindowRef={modalWindowRef} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PCRSummary\r\n","import React, { useRef } from 'react'\r\nimport { StylesProvider } from '@mui/styles'\r\n\r\nimport Layout from '../components/layout'\r\nimport PCRSummary from '../components/options/pcr/pcrSummary'\r\nimport LoadingAnime from '../components/loadingAnime'\r\nimport SEO from '../components/seo'\r\n\r\nconst OptionsPCRPage = () => {\r\n\r\n  const loadingAnimeRef = useRef({\r\n    getLoading: null,\r\n    setLoading: null\r\n  })\r\n\r\n  return (\r\n    <StylesProvider injectFirst>\r\n      <SEO />\r\n      <Layout >\r\n        <PCRSummary loadingAnimeRef={loadingAnimeRef} />\r\n      </Layout>\r\n      <LoadingAnime loadingAnimeRef={loadingAnimeRef} />\r\n    </StylesProvider>\r\n  )\r\n}\r\n\r\nexport default OptionsPCRPage\r\n"],"sourceRoot":""}