{"version":3,"sources":["webpack:///./node_modules/recharts/es6/chart/LineChart.js","webpack:///./node_modules/@mui/icons-material/BarChartSharp.js","webpack:///./src/components/industry-market/industryMarketChart.js","webpack:///./src/components/industry-market/industryTable.js","webpack:///./src/pages/industry-market.js","webpack:///./src/components/industry-market/industryTable.module.scss","webpack:///./node_modules/recharts/es6/chart/BarChart.js"],"names":["LineChart","chartName","GraphicalChild","axisComponents","axisType","AxisComp","formatAxisMap","_interopRequireDefault","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","jsx","d","IndustryMarketChart","_ref","marketData","perfData","info","React","createElement","style","width","window","innerWidth","height","innerHeight","maxWidth","maxHeight","ResponsiveContainer","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tickFormatter","tickItem","moment","format","YAxis","domain","Tooltip","Legend","wrapperStyle","Line","type","name","market","stroke","dot","BarChart","tick","ReferenceLine","y","Bar","industry","fill","unit","IndustryTable","loadingAnimeRef","modalWindowRef","useRef","popModalWindow","popPureModal","tableColList","hide","text","get","response","useFetch","cachePolicy","getIndustryTable","async","resp_data","ok","console","log","output","src","forEach","index","baseData","id","length","Industry","Change","FloatShort","Recom","PerfWeek","PerfMonth","PerfQuart","PerfHalf","PerfYear","PerfYTD","Url","MKSymbol","MKSource","MKPerfWeek","Number","MAX_VALUE","MKPerfMonth","MKPerfQuart","MKPerfHalf","MKPerfYear","MKPerfYTD","MKDataUrl","push","mkVal","mkIndex","assign","genRowData","setRowData","current","setLoading","rowData","useState","hideColState","setHideColState","useEffect","Fragment","className","industryTableStyle","container","table","DataGrid","rows","columns","field","headerName","renderCell","params","row","Link","href","target","rel","ColorPercentField","toFixed","fontWeight","color","IconButton","size","aria-haspopup","onClick","symbol","fileName","match","join","reduce","accumulator","currentValue","unshift","Date","Close","parseFloat","parseInt","getMarketData","BarChartSharpIcon","fontSize","scrollbarSize","pageSize","rowsPerPageOptions","components","NoRowsOverlay","DefaultDataGridTable","disableSelectionOnClick","onColumnVisibilityChange","param","tempHideColState","ModalWindow","IndustryPage","getLoading","StylesProvider","injectFirst","SEO","Layout","LoadingAnime","module","defaultTooltipEventType","validateTooltipEventTypes"],"mappings":"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","file":"component---src-pages-industry-market-js-dc27f5461242c9a0b1d1.js","sourcesContent":["/**\n * @fileOverview Line Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Line } from '../cartesian/Line';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var LineChart = generateCategoricalChart({\n  chartName: 'LineChart',\n  GraphicalChild: Line,\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)(/*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M4 9h4v11H4zm12 4h4v7h-4zm-6-9h4v16h-4z\"\n}), 'BarChartSharp');","import React from 'react'\r\nimport {\r\n  LineChart, \r\n  Line, \r\n  XAxis, \r\n  YAxis, \r\n  CartesianGrid, \r\n  Tooltip, \r\n  Legend, \r\n  Bar, \r\n  BarChart, \r\n  ReferenceLine,\r\n  ResponsiveContainer \r\n} from 'recharts'\r\n\r\nimport moment from 'moment'\r\n\r\nconst IndustryMarketChart = ({ marketData, perfData, info}) => {\r\n  return (  \r\n    <div style={{ width: (window.innerWidth - 100) + 'px', height: (window.innerHeight - 100) + 'px', maxWidth: '1200px', maxHeight: '800px' }}>\r\n      <ResponsiveContainer width=\"100%\" height=\"47%\">\r\n        <LineChart\r\n          data={marketData}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"Date\" tickFormatter={(tickItem) => {\r\n            return moment(tickItem).format('MM/DD/YYYY')\r\n          }}/>\r\n          <YAxis domain={['auto', 'auto']}/>\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ bottom: -15 }}/>\r\n          <Line type=\"monotone\" name={`Market (${info.market})`} dataKey=\"Close\" stroke=\"#8884d8\" dot={false}/>\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n      <div style={{height:\"6%\"}}></div>\r\n      <ResponsiveContainer width=\"100%\" height=\"47%\">\r\n        <BarChart\r\n          data={perfData}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis tickFormatter={(tick) => {\r\n            return `${tick}%`;\r\n          }} domain={['auto', 'auto']}/>\r\n          <Tooltip />\r\n          <Legend />\r\n          <ReferenceLine y={0} stroke=\"#000\" />\r\n          <Bar name={`Industry (${info.industry})`} dataKey=\"industry\" fill=\"#82ca9d\" unit=\"%\" />\r\n          <Bar name={`Market (${info.market})`} dataKey=\"market\" fill=\"#8884d8\" unit=\"%\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default IndustryMarketChart\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { DataGrid } from '@mui/x-data-grid'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport BarChartSharpIcon from '@mui/icons-material/BarChartSharp'\r\nimport Link from '@mui/material/Link'\r\nimport useFetch from 'use-http'\r\n\r\nimport ModalWindow from '../modalWindow'\r\nimport IndustryMarketChart from './industryMarketChart'\r\nimport DefaultDataGridTable from '../defaultDataGridTable'\r\nimport { ColorPercentField } from '../../common/dataGridUtil'\r\n\r\nimport industryTableStyle from './industryTable.module.scss'\r\nimport '../muiTablePagination.css'\r\n\r\nconst IndustryTable = ({ loadingAnimeRef }) => {\r\n\r\n  const modalWindowRef = useRef({\r\n    popModalWindow: null,\r\n    popPureModal: null,\r\n  })\r\n\r\n  const tableColList = {\r\n    Change: { hide: false, text: 'Change' },\r\n    FloatShort: { hide: true, text: 'Float Short' },\r\n    Recom: { hide: true, text: 'Recom' },\r\n    PerfWeek: { hide: false, text: 'Perf Week' },\r\n    PerfMonth: { hide: false, text: 'Perf Month' },\r\n    PerfQuart: { hide: false, text: 'Perf Quart' },\r\n    PerfHalf: { hide: false, text: 'Perf Half' },\r\n    PerfYear: { hide: false, text: 'Perf Year' },\r\n    PerfYTD: { hide: false, text: 'Perf YTD' },\r\n    MKSymbol: { hide: false, text: 'Symbol' },\r\n    MKSource: { hide: false, text: 'Source' },\r\n    MKPerfWeek: { hide: false, text: 'Perf Week' },\r\n    MKPerfMonth: { hide: false, text: 'Perf Month' },\r\n    MKPerfQuart: { hide: false, text: 'Perf Quart' },\r\n    MKPerfHalf: { hide: false, text: 'Perf Half' },\r\n    MKPerfYear: { hide: false, text: 'Perf Year' },\r\n    MKPerfYTD: { hide: false, text: 'Perf YTD' },\r\n    Chart: { hide: false, text: 'Chart' },\r\n  }\r\n\r\n  const genTableColTemplate = () => {\r\n    return [\r\n      {\r\n        field: 'Industry',\r\n        headerName: 'Industry',\r\n        width: 250,\r\n        renderCell: (params) => (\r\n          params.row['Url'] === '-' ?\r\n            <span>{params.value}</span> :\r\n            <Link href={params.row['Url']} target=\"_blank\" rel=\"noreferrer noopener\">\r\n              <span>{params.value}</span>\r\n            </Link>\r\n        ),\r\n        hide: 'Industry' in hideColState ? hideColState['Industry'] :  false\r\n      },\r\n      ColorPercentField('Change', tableColList.Change.text, 130, 2, 'Change' in hideColState ? hideColState['Change'] : tableColList['Change'].hide, 500),\r\n      {\r\n        field: 'FloatShort',\r\n        headerName: tableColList.FloatShort.text,\r\n        width: 130,\r\n        type: 'number',\r\n        renderCell: (params) => (\r\n          <span>{(params.value * 100).toFixed(2) + \"%\"}</span>\r\n        ),\r\n        hide: 'FloatShort' in  hideColState ? hideColState['FloatShort'] : tableColList['FloatShort'].hide\r\n      },\r\n      {\r\n        field: 'Recom',\r\n        headerName: tableColList.Recom.text,\r\n        width: 130,\r\n        type: 'number',\r\n        renderCell: (params) => (\r\n          <span style={{ fontWeight: 500, color: params.value < 2 ? 'green' : params.value > 3 ? 'red' : '' }}>{params.value}</span>\r\n        ),\r\n        hide: 'Recom' in hideColState ? hideColState['Recom'] : tableColList['Recom'].hide\r\n      },\r\n      ColorPercentField('PerfWeek', tableColList.PerfWeek.text, 145, 2, 'PerfWeek' in hideColState ? hideColState['PerfWeek'] : tableColList['PerfWeek'].hide, 500),\r\n      ColorPercentField('PerfMonth', tableColList.PerfMonth.text, 150, 2, 'PerfMonth' in  hideColState? hideColState['PerfMonth'] : tableColList['PerfMonth'].hide, 500),\r\n      ColorPercentField('PerfQuart', tableColList.PerfQuart.text, 145, 2, 'PerfQuart' in hideColState ? hideColState['PerfQuart'] : tableColList['PerfQuart'].hide, 500),\r\n      ColorPercentField('PerfHalf', tableColList.PerfHalf.text, 140, 2, 'PerfHalf' in hideColState ? hideColState['PerfHalf'] : tableColList['PerfHalf'].hide, 500),\r\n      ColorPercentField('PerfYear', tableColList.PerfYear.text, 140, 2, 'PerfYear' in hideColState ? hideColState['PerfYear'] : tableColList['PerfYear'].hide, 500),\r\n      ColorPercentField('PerfYTD', tableColList.PerfYTD.text, 140, 2, 'PerfYTD' in hideColState ? hideColState['PerfYTD'] : tableColList['PerfYTD'].hide, 500),\r\n      { field: 'MKSymbol', headerName: tableColList.MKSymbol.text, width: 130, hide: 'MKSymbol' in  hideColState ? hideColState['MKSymbol'] : tableColList['MKSymbol'].hide },\r\n      {\r\n        field: 'MKSource',\r\n        headerName: tableColList.MKSource.text,\r\n        width: 130,\r\n        renderCell: (params) => (\r\n          params.row['MKDataUrl'] === '-' ?\r\n            <span>-</span> :\r\n            <Link href={params.row['MKDataUrl']} target=\"_blank\" rel=\"noreferrer noopener\">\r\n              <span>{params.value}</span>\r\n            </Link>\r\n        ),\r\n        hide: 'MKSource' in  hideColState ? hideColState['MKSource'] : tableColList['MKSource'].hide\r\n      },\r\n      ColorPercentField('MKPerfWeek', tableColList.MKPerfWeek.text, 145, 2, 'MKPerfWeek' in  hideColState? hideColState['MKPerfWeek'] : tableColList['MKPerfWeek'].hide, 500),\r\n      ColorPercentField('MKPerfMonth', tableColList.MKPerfMonth.text, 150, 2, 'MKPerfMonth' in  hideColState? hideColState['MKPerfMonth'] : tableColList['MKPerfMonth'].hide, 500),\r\n      ColorPercentField('MKPerfQuart', tableColList.MKPerfQuart.text, 145, 2, 'MKPerfQuart' in hideColState ? hideColState['MKPerfQuart'] : tableColList['MKPerfQuart'].hide, 500),\r\n      ColorPercentField('MKPerfHalf', tableColList.MKPerfHalf.text, 140, 2, 'MKPerfHalf' in hideColState ? hideColState['MKPerfHalf'] : tableColList['MKPerfHalf'].hide, 500),\r\n      ColorPercentField('MKPerfYear', tableColList.MKPerfYear.text, 140, 2, 'MKPerfYear' in  hideColState? hideColState['MKPerfYear'] : tableColList['MKPerfYear'].hide, 500),\r\n      ColorPercentField('MKPerfYTD', tableColList.MKPerfYTD.text, 140, 2, 'MKPerfYTD' in  hideColState ? hideColState['MKPerfYTD'] : tableColList['MKPerfYTD'].hide, 500),\r\n      {\r\n        field: 'Chart',\r\n        headerName: tableColList.Chart.text,\r\n        width: 120,\r\n        renderCell: (params) => (\r\n          params.row['MKDataUrl'] === '-' ?\r\n            <span>-</span> :\r\n          <IconButton\r\n            size=\"small\"\r\n            aria-haspopup=\"true\"\r\n            onClick={() => {\r\n              const getMarketData = async (src, symbol) =>{\r\n                let fileName = (src + '_' + symbol).match(/\\w+/gi).join('_') + '.json'\r\n                const resp_data = await get('/norn-data/markets/' + fileName)\r\n                console.log(resp_data)\r\n                if (response.ok && resp_data.data && resp_data.data.length > 0) {\r\n                  let info = {\r\n                    industry: params.row['Industry'],\r\n                    market: params.row['MKSymbol'],\r\n                  }\r\n\r\n                  let marketData = resp_data.data.reduce((accumulator, currentValue) => {\r\n                    accumulator.unshift({ Date: currentValue.Date, Close: parseFloat(currentValue.Close)})\r\n                    return accumulator\r\n                  }, [])\r\n\r\n                  let perfData = [\r\n                    {\r\n                      name: 'Perf Week',\r\n                      industry: parseInt(params.row['PerfWeek'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfWeek'] * 10000, 10) / 100.0,\r\n                    },\r\n                    {\r\n                      name: 'Perf Month',\r\n                      industry: parseInt(params.row['PerfMonth'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfMonth'] * 10000, 10) / 100.0,\r\n                    },\r\n                    {\r\n                      name: 'Perf Quart',\r\n                      industry: parseInt(params.row['PerfQuart'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfQuart'] * 10000, 10) / 100.0,\r\n                    },\r\n                    {\r\n                      name: 'Perf Half',\r\n                      industry: parseInt(params.row['PerfHalf'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfHalf'] * 10000, 10) / 100.0,\r\n                    },\r\n                    {\r\n                      name: 'Perf Year',\r\n                      industry: parseInt(params.row['PerfYear'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfYear'] * 10000, 10) / 100.0,\r\n                    },\r\n                    {\r\n                      name: 'Perf YTD',\r\n                      industry: parseInt(params.row['PerfYTD'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfYTD'] * 10000, 10) / 100.0,\r\n                    },\r\n                  ]\r\n\r\n                  modalWindowRef.current.popModalWindow(<IndustryMarketChart marketData={marketData} perfData={perfData} info={info}/>)\r\n                }\r\n                else{\r\n                  modalWindowRef.current.popModalWindow(<div>Load market data failed</div>)\r\n                }\r\n              }\r\n\r\n              getMarketData(params.row['MKSource'], params.row['MKSymbol'])\r\n            }}\r\n          >\r\n            <BarChartSharpIcon color=\"primary\" style={{ fontSize: 40 }} />\r\n          </IconButton>\r\n        ),\r\n        hide: 'Chart' in  hideColState? hideColState['Chart'] : tableColList['Chart'].hide\r\n      },\r\n    ]\r\n  }\r\n\r\n  const { get, response } = useFetch({ cachePolicy: 'no-cache' })\r\n  const genRowData = (src) => {\r\n    let output = []\r\n    src.forEach((value, index) => {\r\n      let baseData = {\r\n        id: output.length,\r\n        Industry: value['Industry'],\r\n        Change: value['Change'],\r\n        FloatShort: value['Float Short'],\r\n        Recom: value['Recom'],\r\n        PerfWeek: value['Perf Week'],\r\n        PerfMonth: value['Perf Month'],\r\n        PerfQuart: value['Perf Quart'],\r\n        PerfHalf: value['Perf Half'],\r\n        PerfYear: value['Perf Year'],\r\n        PerfYTD: value['Perf YTD'],\r\n        Url: value['Url'],\r\n        MKSymbol: '-',\r\n        MKSource: '-',\r\n        MKPerfWeek: -Number.MAX_VALUE,\r\n        MKPerfMonth: -Number.MAX_VALUE,\r\n        MKPerfQuart: -Number.MAX_VALUE,\r\n        MKPerfHalf: -Number.MAX_VALUE,\r\n        MKPerfYear: -Number.MAX_VALUE,\r\n        MKPerfYTD: -Number.MAX_VALUE,\r\n        MKDataUrl: '-',\r\n      }\r\n\r\n      if (value['Market'].length === 0) {\r\n        output.push(baseData)\r\n      }\r\n      else {\r\n        value['Market'].forEach((mkVal, mkIndex) => {\r\n          let data = Object.assign({}, baseData)\r\n          data.id = output.length\r\n          data.MKSymbol = mkVal['symbol']\r\n          data.MKSource = mkVal['src']\r\n          data.MKPerfWeek = mkVal['Perf Week']\r\n          data.MKPerfMonth = mkVal['Perf Month']\r\n          data.MKPerfQuart = mkVal['Perf Quart']\r\n          data.MKPerfHalf = mkVal['Perf Half']\r\n          data.MKPerfYear = mkVal['Perf Year']\r\n          data.MKPerfYTD = mkVal['Perf YTD']\r\n          data.MKDataUrl = mkVal['dataUrl']\r\n          output.push(data)\r\n        })\r\n      }\r\n    })\r\n    return output\r\n  }\r\n\r\n  const getIndustryTable = async () =>{\r\n    const resp_data = await get('/norn-data/indusrty-table.json')\r\n    if (response.ok) {\r\n      console.log(resp_data)\r\n      let output = genRowData(resp_data['data'])\r\n      setRowData(output)\r\n    }\r\n    else{\r\n      modalWindowRef.current.popModalWindow(<div>Load indusrty-table.json failed</div>)\r\n      setRowData([])\r\n    }\r\n    loadingAnimeRef.current.setLoading(false)\r\n  }\r\n  const [rowData, setRowData] = useState([])\r\n  const [hideColState, setHideColState] = useState({})\r\n\r\n  useEffect(() => {\r\n    // componentDidMount is here!\r\n    // componentDidUpdate is here!\r\n    getIndustryTable()\r\n    return () => {\r\n      // componentWillUnmount is here!\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div className={industryTableStyle.container}>\r\n        <div className={industryTableStyle.table}>\r\n          <DataGrid rows={rowData} columns={genTableColTemplate()} scrollbarSize={17} pageSize={50} rowsPerPageOptions={[]} components={{ NoRowsOverlay: DefaultDataGridTable, }} disableSelectionOnClick onColumnVisibilityChange={(param) => {\r\n            let tempHideColState = hideColState\r\n            tempHideColState[param['field']] = !param['isVisible']\r\n            setHideColState(tempHideColState)\r\n          }}/>\r\n        </div>\r\n      </div>\r\n      <ModalWindow modalWindowRef={modalWindowRef} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default IndustryTable\r\n","import React, { useRef } from 'react'\r\nimport { StylesProvider } from '@mui/styles'\r\n\r\nimport Layout from '../components/layout'\r\nimport IndustryTable from '../components/industry-market/industryTable'\r\nimport LoadingAnime from '../components/loadingAnime'\r\nimport SEO from '../components/seo'\r\n\r\nconst IndustryPage = () => {\r\n\r\n  const loadingAnimeRef = useRef({\r\n    getLoading: null,\r\n    setLoading: null\r\n  })\r\n\r\n  return (\r\n    <StylesProvider injectFirst>\r\n      <SEO />\r\n      <Layout >\r\n        <IndustryTable loadingAnimeRef={loadingAnimeRef}/>\r\n      </Layout>\r\n      <LoadingAnime loadingAnimeRef={loadingAnimeRef} />\r\n    </StylesProvider>\r\n  )\r\n}\r\n\r\nexport default IndustryPage\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"industryTable-module--container--2zRSU\",\"table\":\"industryTable-module--table--2GQAU\"};","/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});"],"sourceRoot":""}