{"version":3,"sources":["webpack:///./src/components/dividend-champions/dividendChampions.module.scss","webpack:///./src/components/dividend-champions/dividendChart.js","webpack:///./src/components/dividend-champions/dividendChampions.js","webpack:///./src/pages/dividend-champions.js"],"names":["module","exports","DividendChart","_ref","title","dividendCloseData","closeVolumeData","React","createElement","style","width","window","innerWidth","height","innerHeight","maxWidth","maxHeight","ResponsiveContainer","ComposedChart","data","syncId","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tickFormatter","tickItem","moment","format","YAxis","yAxisId","domain","tick","orientation","Tooltip","Legend","wrapperStyle","Line","connectNulls","type","name","dot","stroke","strokeWidth","unit","Bar","fill","DividendChampions","loadingAnimeRef","hideColState","setHideColState","useState","modalWindowRef","useRef","popModalWindow","popPureModal","tableColList","hide","text","getData","async","url","fetchObj","resp_data","get","response","ok","renderShowChart","symbol","payoutsYear","Promise","all","fetchShortData","then","allResponses","length","forEach","e","push","Date","EstimateDividendsYield","parseFloat","toFixed","Dividends","Close","Volume","current","catch","fetchStockData","useFetch","cachePolicy","renderShortStocksTable","config","showChart","dividendDateMap","Object","assign","apply","concat","_toConsumableArray","map","x","output","keys","reduce","result","index","stockInfo","championsValue","dividendDate","o","id","close","Number","MAX_VALUE","PE","PB","dividend","noYears","avgYield5Y","DGR1Y","DGR3Y","DGR5Y","DGR10Y","exDividendLink","exDividendDate","high52","low52","perfWeek","perfMonth","perfQuarter","perfHalfY","perfYear","perfYTD","filter_symbols","includes","console","log","setRowData","setLoading","rowData","searchVal","setSearchVal","useEffect","queryParameters","URLSearchParams","location","search","Fragment","className","dividendChampionsStyle","container","table","DataGrid","rows","columns","SymbolNameField","PriceField","PureFieldWithValueCheck","PercentField","ColorPercentField","DividendDRGDescription","field","headerName","renderCell","params","row","Link","href","target","rel","color","value","IconButton","size","aria-haspopup","onClick","BarChartSharpIcon","fontSize","components","NoRowsOverlay","DefaultDataGridTable","Toolbar","SearchGridToolbar","clickCallback","info","placeholder","tooltip","DividendChampionsTooltip","link","DividendChampionsUrl","disableSelectionOnClick","onColumnVisibilityChange","param","tempHideColState","ModalWindow","DividendChampionsPage","getLoading","StylesProvider","injectFirst","SEO","Layout","LoadingAnime"],"mappings":"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","file":"component---src-pages-dividend-champions-js-4e2f5cac27b0b22f35b9.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"dividendChampions-module--container--1ntSf\",\"showColumn\":\"dividendChampions-module--showColumn--bwrTq\",\"table\":\"dividendChampions-module--table--Ya5lU\"};","import React from 'react'\r\nimport {\r\n  LineChart,\r\n  ComposedChart,\r\n  Line,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from 'recharts'\r\n\r\nimport moment from 'moment'\r\n\r\nconst DividendChart = ({ title, dividendCloseData, closeVolumeData }) => {\r\n  return (\r\n    <div style={{ width: (window.innerWidth - 80) + 'px', height: (window.innerHeight - 80) + 'px', maxWidth: '1200px', maxHeight: '800px' }}>\r\n      <h3>{title}</h3>\r\n      <ResponsiveContainer width=\"100%\" height=\"47%\">\r\n        <ComposedChart\r\n          data={dividendCloseData}\r\n          syncId=\"dividendCloseData\"\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"Date\" tickFormatter={(tickItem) => {\r\n            return moment(tickItem).format('MM/DD/YYYY')\r\n          }} />\r\n          <YAxis yAxisId=\"left\" domain={['auto', 'auto']} tickFormatter={(tick) => {\r\n            return `${tick}%`;\r\n          }} />\r\n          <YAxis yAxisId=\"right\" orientation=\"right\" domain={['auto', 'auto']} />\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ bottom: -5 }}/>\r\n          <Line connectNulls yAxisId=\"right\" type=\"monotone\" name={\"Dividend\"} dataKey=\"Dividends\" dot={{ stroke: '#FF8042', strokeWidth: 2 }} stroke=\"#FF8042\" />\r\n          <Line connectNulls yAxisId=\"left\" type=\"monotone\" name={\"Annual Dividend Yield (%, Estimated)\"} dataKey=\"EstimateDividendsYield\" stroke=\"#8884d8\" dot={false} unit=\"%\" />\r\n        </ComposedChart>\r\n      </ResponsiveContainer>     \r\n      <ResponsiveContainer width=\"100%\" height=\"47%\">\r\n        <ComposedChart\r\n          data={closeVolumeData}\r\n          syncId=\"closeVolumeData\"\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"Date\" tickFormatter={(tickItem) => {\r\n            return moment(tickItem).format('MM/DD/YYYY')\r\n          }} />\r\n          <YAxis yAxisId=\"left\" domain={['auto', 'auto']}/>\r\n          <YAxis yAxisId=\"right\" orientation=\"right\" domain={['auto', 'auto']}/>\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ bottom: -5 }}/>\r\n          <Line connectNulls yAxisId=\"left\" type=\"monotone\" name={\"Close Price\"} dataKey=\"Close\" stroke=\"#8884d8\" dot={false} />\r\n          <Bar yAxisId=\"right\" name={\"Volume\"} dataKey=\"Volume\" fill=\"#82ca9d\" />\r\n        </ComposedChart>\r\n      </ResponsiveContainer>     \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default DividendChart\r\n","\r\nimport React, { useState, useRef, useEffect } from 'react'\r\nimport { DataGrid } from '@mui/x-data-grid'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport BarChartSharpIcon from '@mui/icons-material/BarChartSharp'\r\nimport useFetch from 'use-http'\r\nimport moment from 'moment'\r\nimport Link from '@mui/material/Link'\r\n\r\nimport DividendChart from './dividendChart'\r\nimport ModalWindow from '../modalWindow'\r\nimport DefaultDataGridTable from '../defaultDataGridTable'\r\nimport SearchGridToolbar from '../searchGridToolbar'\r\nimport { DividendChampionsUrl, DividendChampionsTooltip, DividendDRGDescription } from '../../common/common'\r\nimport { SymbolNameField, PriceField, PureFieldWithValueCheck, PercentField, ColorPercentField } from '../../common/dataGridUtil'\r\n\r\nimport dividendChampionsStyle from './dividendChampions.module.scss'\r\nimport '../muiTablePagination.css'\r\n\r\nconst DividendChampions = ({ loadingAnimeRef }) => {\r\n\r\n  const [hideColState, setHideColState] = useState({})\r\n\r\n  const modalWindowRef = useRef({\r\n    popModalWindow: null,\r\n    popPureModal: null,\r\n  })\r\n\r\n\r\n  const tableColList = {\r\n    Close: { hide: false, text: 'Price' },\r\n    PE: { hide: false, text: 'P/E' },\r\n    PB: { hide: false, text: 'P/B' },\r\n    Dividend: { hide: false, text: 'Dividend %' },\r\n    AvgYield5Y: { hide: false, text: 'Dividend %(5Y)' },\r\n    NoYears: { hide: false, text: 'No Years' },\r\n    DGR1Y: { hide: false, text: 'DGR 1Y' },\r\n    DGR3Y: { hide: false, text: 'DGR 3Y' },\r\n    DGR5Y: { hide: false, text: 'DGR 5Y' },\r\n    DGR10Y: { hide: false, text: 'DGR 10Y' },\r\n    ExDividendDate: { hide: false, text: 'Ex-Dividend Date' },\r\n    High52: { hide: false, text: '52W High' },\r\n    Low52: { hide: false, text: '52W Low' },\r\n    PerfWeek: { hide: false, text: 'Perf Week' },\r\n    PerfMonth: { hide: false, text: 'Perf Month' },\r\n    PerfQuarter: { hide: false, text: 'Perf Quarter' },\r\n    PerfHalfY: { hide: false, text: 'Perf Half Y' },\r\n    PerfYear: { hide: false, text: 'Perf Year' },\r\n    PerfYTD: { hide: false, text: 'Perf YTD' },\r\n    Chart: { hide: false, text: 'Chart' },\r\n  }\r\n\r\n  const getData = async (url, fetchObj) => {\r\n    const resp_data = await fetchObj.get(url)\r\n    if (fetchObj.response.ok && resp_data) {\r\n      return resp_data\r\n    }\r\n    else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  const renderShowChart = (symbol, payoutsYear)=> {\r\n    Promise.all([\r\n      getData(\"/norn-data/dividend/historical-quotes/\" + symbol+\".json\", fetchShortData),\r\n    ]).then((allResponses) => {\r\n      // console.log(allResponses)\r\n      if (allResponses.length === 1 && allResponses[0] !== null) {\r\n        const title = `${symbol} Chart`\r\n        let dividendCloseData = []\r\n        let closeVolumeData = []\r\n        allResponses[0][\"data\"].forEach(e => {\r\n          if (\"Dividends\" in e) {\r\n            dividendCloseData.push({\r\n              Date: e[\"date\"],\r\n              EstimateDividendsYield: parseFloat((e[\"Dividends\"] * 100 * payoutsYear / e[\"Close\"]).toFixed(2)),\r\n              Dividends: e[\"Dividends\"],\r\n            })\r\n          }\r\n          closeVolumeData.push({\r\n            Date: e[\"date\"],\r\n            Close: parseFloat(e[\"Close\"].toFixed(2)),\r\n            Volume: e[\"Volume\"],\r\n          })\r\n        })\r\n        modalWindowRef.current.popModalWindow(<DividendChart title={title} dividendCloseData={dividendCloseData} closeVolumeData={closeVolumeData} />)\r\n      } else {\r\n        modalWindowRef.current.popModalWindow(<div>Load some data failed</div>)\r\n      }\r\n    }).catch(() => {\r\n      modalWindowRef.current.popModalWindow(<div>Can't draw chart</div>)\r\n    })\r\n  }\r\n\r\n  const genTableColTemplate = () => {\r\n    return [\r\n      SymbolNameField('Symbol', 130, 'symbol' in hideColState ? hideColState['symbol'] : false),\r\n      PriceField('close', tableColList.Close.text, 110, 'close' in hideColState ? hideColState['close'] : tableColList['Close'].hide, null, \"yahoo\"),\r\n      PureFieldWithValueCheck(\"PE\", tableColList.PE.text, 110, 2, \"PE\" in hideColState ? hideColState[\"PE\"] : tableColList['PE'].hide),\r\n      PureFieldWithValueCheck(\"PB\", tableColList.PB.text, 110, 2, \"PB\" in hideColState ? hideColState[\"PB\"] : tableColList['PB'].hide),\r\n      PercentField(\"dividend\", tableColList.Dividend.text, 150, \"dividend\" in hideColState ? hideColState[\"dividend\"] : tableColList['Dividend'].hide),\r\n      PercentField(\"avgYield5Y\", tableColList.AvgYield5Y.text, 150, \"avgYield5Y\" in hideColState ? hideColState[\"avgYield5Y\"] : tableColList['AvgYield5Y'].hide),\r\n      PureFieldWithValueCheck(\"noYears\", tableColList.NoYears.text, 110, 0, \"noYears\" in hideColState ? hideColState[\"noYears\"] : tableColList['NoYears'].hide),\r\n      ColorPercentField(\"DGR1Y\", tableColList.DGR1Y.text, 150, 2, \"DGR1Y\" in hideColState ? hideColState[\"DGR1Y\"] : tableColList['DGR1Y'].hide, 500, DividendDRGDescription),\r\n      ColorPercentField(\"DGR3Y\", tableColList.DGR3Y.text, 150, 2, \"DGR3Y\" in hideColState ? hideColState[\"DGR3Y\"] : tableColList['DGR3Y'].hide, 500, DividendDRGDescription),\r\n      ColorPercentField(\"DGR5Y\", tableColList.DGR5Y.text, 150, 2, \"DGR5Y\" in hideColState ? hideColState[\"DGR5Y\"] : tableColList['DGR5Y'].hide, 500, DividendDRGDescription),\r\n      ColorPercentField(\"DGR10Y\", tableColList.DGR10Y.text, 150, 2, \"DGR10Y\" in hideColState ? hideColState[\"DGR10Y\"] : tableColList['DGR10Y'].hide, 500, DividendDRGDescription),\r\n      {\r\n        field: 'exDividendDate',\r\n        headerName: tableColList.ExDividendDate.text,\r\n        width: 130,\r\n        renderCell: (params) => (\r\n          'exDividendLink' in params.row && params.row['exDividendLink'] != \"\" && params.row['exDividendLink'] != \"-\" ?       \r\n          <Link href={params.row['exDividendLink']} target=\"_blank\" rel=\"noreferrer noopener\">\r\n            <span style={{color: params.row['exDividendDateColor']}}>{params.value}</span>\r\n          </Link> : <span>{params.value}</span>\r\n        ),\r\n        hide: 'exDividendDate' in hideColState ? hideColState['exDividendDate'] : tableColList['ExDividendDate'].hide\r\n      },\r\n      PercentField(\"high52\", tableColList.High52.text, 150, \"high52\" in hideColState ? hideColState[\"high52\"] : tableColList['High52'].hide),\r\n      PercentField(\"low52\", tableColList.Low52.text, 150, \"low52\" in hideColState ? hideColState[\"low52\"] : tableColList['Low52'].hide),\r\n      ColorPercentField(\"perfWeek\", tableColList.PerfWeek.text, 150, 2, \"perfWeek\" in hideColState ? hideColState[\"perfWeek\"] : tableColList['PerfWeek'].hide, 500),\r\n      ColorPercentField(\"perfMonth\", tableColList.PerfMonth.text, 150, 2, \"perfMonth\" in hideColState ? hideColState[\"perfMonth\"] : tableColList['PerfMonth'].hide, 500),\r\n      ColorPercentField(\"perfQuarter\", tableColList.PerfQuarter.text, 150, 2, \"perfQuarter\" in hideColState ? hideColState[\"perfQuarter\"] : tableColList['PerfQuarter'].hide, 500),\r\n      ColorPercentField(\"perfHalfY\", tableColList.PerfHalfY.text, 150, 2, \"perfHalfY\" in hideColState ? hideColState[\"perfHalfY\"] : tableColList['PerfHalfY'].hide, 500),\r\n      ColorPercentField(\"perfYear\", tableColList.PerfYear.text, 150, 2, \"perfYear\" in hideColState ? hideColState[\"perfYear\"] : tableColList['PerfYear'].hide, 500),\r\n      ColorPercentField(\"perfYTD\", tableColList.PerfYTD.text, 150, 2, \"perfYTD\" in hideColState ? hideColState[\"perfYTD\"] : tableColList['PerfYTD'].hide, 500),\r\n      {\r\n        field: 'Chart',\r\n        headerName: tableColList.Chart.text,\r\n        width: 130,\r\n        renderCell: (params) => (\r\n          <IconButton\r\n            size=\"small\"\r\n            aria-haspopup=\"true\"\r\n            onClick={()=>{\r\n              renderShowChart(params.row[\"symbol\"], params.row[\"payoutsYear\"])\r\n            }}\r\n          >\r\n            <BarChartSharpIcon color=\"primary\" style={{ fontSize: 40 }} />\r\n          </IconButton>\r\n        ),\r\n        hide: 'Chart' in hideColState ? hideColState['Chart'] : tableColList['Chart'].hide\r\n      },\r\n    ]\r\n  }\r\n\r\n  const fetchStockData = useFetch({ cachePolicy: 'no-cache' })\r\n  const fetchShortData = useFetch({ cachePolicy: 'no-cache' })\r\n  const renderShortStocksTable = (config, showChart)=>{\r\n    Promise.all([\r\n      getData(\"/norn-data/stock/stat.json\", fetchStockData),\r\n      getData('/norn-data/dividend/champions.json', fetchShortData),\r\n      getData('/norn-data/dividend/all_dividend_date_list.json', fetchShortData),\r\n    ]).then((allResponses) => {\r\n      // console.log(allResponses)\r\n      if (allResponses.length === 3 && allResponses[0] !== null && allResponses[1] !== null && allResponses[2] !== null) {        \r\n        let dividendDateMap = Object.assign({}, ...allResponses[2][\"data\"].map((x) => ({[x.symbol]: x})))\r\n        let output = Object.keys(allResponses[1][\"data\"]).reduce((result, symbol, index) => {\r\n          let stockInfo = allResponses[0][symbol]\r\n          let championsValue = allResponses[1][\"data\"][symbol]\r\n          let dividendDate = {\"link\": \"-\", \"ex_dividend_date\": \"-\"}\r\n          if (symbol in dividendDateMap) {\r\n            dividendDate[\"link\"] = dividendDateMap[symbol][\"link\"]\r\n            dividendDate[\"ex_dividend_date\"] = dividendDateMap[symbol][\"ex_dividend_date\"]\r\n          }\r\n          let o = {\r\n            id: index,\r\n            symbol: symbol,\r\n            close: stockInfo !== undefined && stockInfo !== null && stockInfo['Close'] !== '-' ? stockInfo['Close'] : -Number.MAX_VALUE,\r\n            PE: stockInfo !== undefined && stockInfo !== null && stockInfo['P/E'] !== '-' ? stockInfo['P/E'] : Number.MAX_VALUE,\r\n            PB: stockInfo !== undefined && stockInfo !== null && stockInfo['P/B'] !== '-' ? stockInfo['P/B'] : Number.MAX_VALUE,\r\n            dividend: championsValue !== undefined && championsValue !== null && championsValue['Div Yield'] !== '-' ? championsValue['Div Yield'] / 100.0 : -Number.MAX_VALUE,\r\n            noYears: championsValue !== undefined && championsValue !== null && championsValue['No Years'] !== '-' ? championsValue['No Years'] : -Number.MAX_VALUE,\r\n            avgYield5Y: championsValue !== undefined && championsValue !== null && championsValue['5Y Avg Yield'] !== '-' ? championsValue['5Y Avg Yield'] / 100.0 : -Number.MAX_VALUE,\r\n            DGR1Y: championsValue !== undefined && championsValue !== null && championsValue['DGR 1Y'] !== '-' ? championsValue['DGR 1Y'] / 100.0 : -Number.MAX_VALUE,\r\n            DGR3Y: championsValue !== undefined && championsValue !== null && championsValue['DGR 3Y'] !== '-' ? championsValue['DGR 3Y'] / 100.0 : -Number.MAX_VALUE,\r\n            DGR5Y: championsValue !== undefined && championsValue !== null && championsValue['DGR 5Y'] !== '-' ? championsValue['DGR 5Y'] / 100.0 : -Number.MAX_VALUE,\r\n            DGR10Y: championsValue !== undefined && championsValue !== null && championsValue['DGR 10Y'] !== '-' ? championsValue['DGR 10Y'] / 100.0 : -Number.MAX_VALUE,\r\n            exDividendLink: dividendDate[\"link\"],\r\n            exDividendDate: dividendDate[\"ex_dividend_date\"],\r\n            payoutsYear: championsValue !== undefined && championsValue !== null && championsValue['Payouts/ Year'] !== '-' ? championsValue['Payouts/ Year'] : 4,\r\n            high52: stockInfo !== undefined && stockInfo !== null && stockInfo['52W High'] !== '-' ? stockInfo['52W High'] : -Number.MAX_VALUE,\r\n            low52: stockInfo !== undefined && stockInfo !== null && stockInfo['52W Low'] !== '-' ? stockInfo['52W Low'] : -Number.MAX_VALUE,\r\n            perfWeek: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Week'] !== '-' ? stockInfo['Perf Week'] : -Number.MAX_VALUE,\r\n            perfMonth: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Month'] !== '-' ? stockInfo['Perf Month'] : -Number.MAX_VALUE,\r\n            perfQuarter: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Quarter'] !== '-' ? stockInfo['Perf Quarter'] : -Number.MAX_VALUE,\r\n            perfHalfY: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Half Y'] !== '-' ? stockInfo['Perf Half Y'] : -Number.MAX_VALUE,\r\n            perfYear: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf Year'] !== '-' ? stockInfo['Perf Year'] : -Number.MAX_VALUE,\r\n            perfYTD: stockInfo !== undefined && stockInfo !== null && stockInfo['Perf YTD'] !== '-' ? stockInfo['Perf YTD'] : -Number.MAX_VALUE,\r\n          }\r\n\r\n          if(config.filter_symbols.length === 0 || config.filter_symbols.includes(symbol)) {\r\n            result.push(o)\r\n          }\r\n          return result\r\n        }, [])\r\n        console.log(output)\r\n        setRowData(output)\r\n        if (showChart) {\r\n          renderShowChart(output[0][\"symbol\"], output[0][\"payoutsYear\"])\r\n        }\r\n      } else {\r\n        modalWindowRef.current.popModalWindow(<div>Load some data failed</div>)\r\n      }\r\n      loadingAnimeRef.current.setLoading(false)\r\n    }).catch(() => {\r\n      modalWindowRef.current.popModalWindow(<div>Can't get data</div>)\r\n      loadingAnimeRef.current.setLoading(false)\r\n    })\r\n  }\r\n\r\n  const [rowData, setRowData] = useState([])\r\n  const [searchVal, setSearchVal] = useState(\"\")\r\n  useEffect(() => {\r\n    // componentDidMount is here!\r\n    // componentDidUpdate is here!\r\n    let config = {filter_symbols: []}\r\n    let showChart = false\r\n    if (typeof window !== 'undefined') {\r\n      const queryParameters = new URLSearchParams(window.location.search)\r\n      let symbol = queryParameters.get(\"symbol\")\r\n      if (symbol) {\r\n        config = {filter_symbols: [symbol]}\r\n      }\r\n      showChart = queryParameters.get(\"showChart\") === \"true\"\r\n    }\r\n    renderShortStocksTable(config, showChart)\r\n    return () => {\r\n      // componentWillUnmount is here!\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div className={dividendChampionsStyle.container}>\r\n        <div className={dividendChampionsStyle.table}>\r\n          <DataGrid rows={rowData} columns={genTableColTemplate()} components={{ NoRowsOverlay: DefaultDataGridTable, Toolbar: ()=>{\r\n            return <SearchGridToolbar searchVal={searchVal} setSearchVal={setSearchVal} clickCallback={(config)=>{\r\n              renderShortStocksTable(config, false)\r\n              }} \r\n              info={{\r\n                placeholder: 'Filter symbols: AAPL, BAC, KSS, ...',\r\n                tooltip: {\r\n                  text: DividendChampionsTooltip,\r\n                  link: DividendChampionsUrl\r\n                }\r\n              }}\r\n              />\r\n            }}} disableSelectionOnClick onColumnVisibilityChange={(param) => {\r\n              let tempHideColState = hideColState\r\n              tempHideColState[param['field']] = !param['isVisible']\r\n              setHideColState(tempHideColState)\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <ModalWindow modalWindowRef={modalWindowRef} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DividendChampions\r\n","import React, { useRef } from 'react'\r\nimport { StylesProvider } from '@mui/styles'\r\n\r\nimport Layout from '../components/layout'\r\nimport DividendChampions from '../components/dividend-champions/dividendChampions'\r\nimport LoadingAnime from '../components/loadingAnime'\r\nimport SEO from '../components/seo'\r\n\r\nconst DividendChampionsPage = () => {\r\n\r\n  const loadingAnimeRef = useRef({\r\n    getLoading: null,\r\n    setLoading: null\r\n  })\r\n\r\n  return (\r\n    <StylesProvider injectFirst>\r\n      <SEO />\r\n      <Layout >\r\n        <DividendChampions loadingAnimeRef={loadingAnimeRef} />\r\n      </Layout>\r\n      <LoadingAnime loadingAnimeRef={loadingAnimeRef} />\r\n    </StylesProvider>\r\n  )\r\n}\r\n\r\nexport default DividendChampionsPage\r\n"],"sourceRoot":""}